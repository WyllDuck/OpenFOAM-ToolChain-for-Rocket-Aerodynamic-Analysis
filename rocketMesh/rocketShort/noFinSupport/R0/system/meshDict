/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2212                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "mesh";
    object      meshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

LENGTH 1.04013;
DIAMETER 0.05815;

ROUND_TIP_X 0.00804;
ROUND_TIP_R 0.00157;

NOSE_LENGTH 0.26924;
POS_AFT_CENTER_X 1.01727;
AFT_LENGTH 0.04572;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

surfaceFile "geometry.fms";
maxCellSize 1;
// boundaryCellSize 0.5;
// boundaryCellSizeRefinementThickness 0.5;
// minCellSize 0.0001;

// Refine the patches within the mesh
localRefinement
{
    aft_detail
    {
        additionalRefinementLevels 11;
        refinementThickness 0.001;
    }

    body_rocket
    {
        additionalRefinementLevels 8;
        refinementThickness 0.003;
    }
}

objectRefinements
{

    refinementDomain
    {
        type        box;
        additionalRefinementLevels 1;  
        
        centre      (0.0 0.0 0.0);
        
        lengthX     100;
        lengthY     100;
        lengthZ     100;
        
    }

    refinementDomainCenter
    {
        type        box;
        additionalRefinementLevels 2;  
        
        centre      (50.0 0.0 0.0);
        
        lengthX     100;
        lengthY     #calc "$DIAMETER * 17";
        lengthZ     #calc "$DIAMETER * 17";
        
    }

    refinement0
    {
        type        cone;
        additionalRefinementLevels 3;  
        
        p0      (#calc "$LENGTH / 2 + (- $LENGTH * 1.5)" 0.0 0.0);
        p1      (#calc "$LENGTH / 2 + ($LENGTH * 1.5)" 0.0 0.0);
        
        radius0     #calc "$DIAMETER / 2 * 30";
        radius1     #calc "$DIAMETER / 2 * 30";
        
    }

    refinement1
    {
        type        cone;
        additionalRefinementLevels 5;  
        
        p0      (#calc "$LENGTH / 2 + (- $LENGTH * 1)" 0.0 0.0);
        p1      (#calc "$LENGTH / 2 + ($LENGTH * 1)" 0.0 0.0);
        
        radius0     #calc "$DIAMETER / 2 * 12";
        radius1     #calc "$DIAMETER / 2 * 12";
        
    }

    refinement2
    {
        type        cone;
        additionalRefinementLevels 7;  
        
        p0      (#calc "$LENGTH / 2 + (- $LENGTH * 0.6)" 0.0 0.0);
        p1      (#calc "$LENGTH / 2 + ($LENGTH * 0.6)" 0.0 0.0);
        
        radius0     #calc "$DIAMETER / 2 * 3.0";
        radius1     #calc "$DIAMETER / 2 * 3.0";
        
    }

    nose_length1
    {
        type        cone;
        additionalRefinementLevels 8;  
        
        p0      (#calc "$NOSE_LENGTH * 0.2 + ($NOSE_LENGTH * 0.35)" 0.0 0.0);
        p1      (#calc "$NOSE_LENGTH * 0.2 + ($NOSE_LENGTH * -0.35)" 0.0 0.0);
        
        radius0     #calc "$DIAMETER / 2";
        radius1     #calc "$DIAMETER / 2";
        
    }

    nose_length2
    {
        type        cone;
        additionalRefinementLevels 9;  
        
        p0      (#calc "$NOSE_LENGTH * 0.12 + (- $NOSE_LENGTH * 0.15)" 0.0 0.0);
        p1      (#calc "$NOSE_LENGTH * 0.12 + ($NOSE_LENGTH * 0.15)" 0.0 0.0);
        
        radius0     #calc "$DIAMETER / 2 * 0.6";
        radius1     #calc "$DIAMETER / 2 * 0.6";

    }
    
    nose_tip1
    {
        type        sphere;
        additionalRefinementLevels 10;

        centre      (#calc "$ROUND_TIP_X" 0.0 0.0);

        radius      #calc "$ROUND_TIP_R * 3";
    }

    aft_length1
    {
        type        cone;
        additionalRefinementLevels 9;
        
        p0      (#calc "$POS_AFT_CENTER_X + $AFT_LENGTH / 2 - 0.015" 0.0 0.0);
        p1      (#calc "$POS_AFT_CENTER_X + $AFT_LENGTH / 2 + 0.015" 0.0 0.0);
        
        radius0 #calc "$DIAMETER / 2";
        radius1 #calc "$DIAMETER / 2"; 
    }

    wake_refinement
    {

        type        cone;
        additionalRefinementLevels 6;
        
        p0      (#calc "$POS_AFT_CENTER_X + $AFT_LENGTH / 2" 0.0 0.0);
        p1      (#calc "$POS_AFT_CENTER_X + $AFT_LENGTH / 2 + 0.4" 0.0 0.0);
        
        radius0 #calc "$DIAMETER / 2 * 3";
        radius1 #calc "$DIAMETER / 2 * 5"; 
       
    }

    wake_refinement2
    {

        type        cone;
        additionalRefinementLevels 4;
        
        p0      (#calc "$POS_AFT_CENTER_X + $AFT_LENGTH / 2" 0.0 0.0);;
        p1      (#calc "$POS_AFT_CENTER_X + $AFT_LENGTH / 2 + 1.8" 0.0 0.0);;
        
        radius0     #calc "$DIAMETER / 2 * 7";
        radius1     #calc "$DIAMETER / 2 * 7";
       
    }
}

// Join separate patches in just one propellerTip
renameBoundary
{
	
	newPatchNames
	{
		body_rocket     {newName wall; type wall;}
        aft_detail      {newName wall; type wall;}
		
        xMin            {newName inlet; type patch;}
		xMax            {newName outlet; type patch;}

        yMin            {newName symmetry; type patch;}
		yMax            {newName far_field; type patch;}
        
        zMin            {newName far_field; type patch;}
		zMax            {newName far_field; type patch;}
	}

}

// Add inflation layers to the patches
boundaryLayers 
{
    
    thicknessRatio 1.4;
    nLayers 0;

    // allowDiscontinuity 0;
    
    patchBoundaryLayers
    {
        body_rocket
        {
            nLayers 5;
        }

        aft_detail
        {
            nLayers 5;
        }
    }
    
    optimiseLayer 0;
    // untangleLayers 0;

    optimisationParameters
    {
        nSmoothNormals 5;
        maxNumIterations 5;
        featureSizeFactor 0.3;
        reCalculateNormals 1;
        relThicknessTol 0.03;
        
    } 
            
}